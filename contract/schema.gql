schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  Announcement_GET_BY_TYPE(type: [String]): [Announcement]
  Announcement_GET_BY_TITLE(title: [String]): [Announcement]
  Department_GET_BY_NAME(name: [String]): [Department]
  Event_GET_BY_COMMISSIONER(Subject: String, Event_date: Date, was_a_speaker: String, orderBy: EventOrderByInput): [Event]
  Announcement_Event(author: String, Subject: [String]) [Announcement_Event]

  GetLinkedDataFragment(triple: [Triple]): [Content]
}

type Triple {
	subject: String
	object: String
	predicate: String
}

type Mutation {
  Announcement: [Announcement]
  Announcement_Event: [Announcement_Event]
  Commissioner: [Commissioner]
  Department: [Department]
  Event: [Event]
}

type Subscription {
  Announcement_SUB_BY_TYPE(type: [String]): [Announcement]
  Announcement_SUB_BY_TITLE(title: [String]): [Announcement]
  Department_SUB_BY_NAME(name: [String]): [Department]
}

# custom scalar - ISO8601 date format (2017–10–06T14:54:54+0)
scalar DateTime
union Announcement_Event = Announcement | Event

enum EventOrderByInput {
  Name_ASC
  Name_DESC
  Event_Date_ASC
  Event_Date_DESC
  Subject_ASC
  Subject_DESC
}

# Hypergraphql context
type __Context {
  # types
  Announcement: _ @href(iri: "http://schema.org/Article")
  Content: _ @href(iri: "http://ec-europa.eu/ontologies/Content")
  Commissioner: _@href(iri: "http://schema.org/Person")
  Department: _ @href(iri: "http://schema.org/GovernmentOrganization")
  Eurovoc: _ @href(iri: "http://ec-europa.eu/ontologies/Eurovoc")
  Event: _ @href(iri: "http://schema.org/Event")
  
  # properties
  comment: _ @href(iri: "http://www.w3.org/2000/01/rdf-schema#comment")
  label: _ @href(iri: "http://www.w3.org/2000/01/rdf-schema#label")
}

# needs refactor for Announcements
interface Content {
  # properties
  iri: String! @service(id: "local-pod-sparql")
  label: [String] @service(id: "local-pod-sparql")
  uuid: String! @service(id: "local-pod-sparql")

  # edges
  is_tagged: [Content] @service(id: "local-pod-sparq")
  is_related: [Content] @service(id: "local-pod-sparql")
}

type Announcement implements Content {
  # properties
  Title: String! @service(id: "local-pod-sparql")
  Announcement_type: String! @service(id: "local-pod-sparql")
  Body: String! @service(id: "local-pod-sparql")
  Description: String! @service(id: "local-pod-sparql")
  First_published_on: DateTime! @service(id: "local-pod-sparql")
  # ID: ID! @service(id:"local-pod-sparql") # or Int
  Introduction: String! @service(id: "local-pod-sparql")
  Location: String! @service(id: "local-pod-sparql")
  Related_content: String! @service(id: "local-pod-sparql")
  # refers rdf:resource="https://schema.org/authorJRC" non-existent
  Responsible_department: Department @service(id: "local-pod-sparql")
  # refers to rdf:resource="http://publications.europa.eu/resource/authority/corporate-body/RTD" non-existent
  Subject_from_Digital_Europa_Thesaurus: String! @service(id: "local-pod-sparql")
  label: [String] @service(id: "local-pod-sparql")
  uuid: String! @service(id: "local-pod-sparql")
  iri: String! @service(id: "local-pod-sparql")
 
  # edges
  is_tagged: [Eurovoc] @service(id: "local-pod-sparq")
  is_related: [Content] @service(id: "local-pod-sparql")
}

type Commissioner implements Content {
  # properties
  Name: String! @service(id: "local-pod-sparql")
  # other properties TBD (To Be Defined)
  iri: String! @service(id: "eurovoc-sparql")
  label: [String] @service(id: "eurovoc-sparql")
  uuid: String! @service(id: "eurovoc-sparql")

  # edges
  was_a_speaker: [Event] @service(id: "local-pod-sparq")
  is_tagged: [Eurovoc] @service(id: "local-pod-sparq")
  is_related: [Content] @service(id: "local-pod-sparql")
}

type Department implements Content {
  # properties
  comment: [String] @service(id: "local-pod-sparql")
  description: [String] @service(id: "local-pod-sparql")
  label: [String] @service(id: "local-pod-sparql")
  postDate: String! @service(id: "local-pod-sparql")
  title: String! @service(id: "local-pod-sparql")
  uuid: String! @service(id: "local-pod-sparql")
  iri: String! @service(id: "local-pod-sparql")

  # edges
  is_tagged: [Eurovoc] @service(id: "local-pod-sparq")
  is_related: [Content] @service(id: "local-pod-sparql")
}

type Eurovoc implements Content {
  # properties
  iri: String! @service(id: "eurovoc-sparql")
  label: [String] @service(id: "eurovoc-sparql")
  name: String! @service(id: "eurovoc-sparql")
  uuid: String! @service(id: "eurovoc-sparql")

  # edges
  is_tagged: [Content] @service(id: "local-pod-sparql")
  is_related: [Content] @service(id: "local-pod-sparql")
}

type Event implements Content {
  # properties
  Name: String! @service(id: "local-pod-sparql")
  Event_date: DateTime! @service(id: "local-pod-sparql")
  Subject: String! @service(id: "local-pod-sparql")
  # other properties TBD (To Be Defined)
  iri: String! @service(id: "eurovoc-sparql")
  label: [String] @service(id: "eurovoc-sparql")
  uuid: String! @service(id: "eurovoc-sparql")

  # edges
  was_a_speaker: [Commissioner] @service(id: "local-pod-sparq")
  is_tagged: [Content] @service(id: "local-pod-sparq")
  is_related: [Content] @service(id: "local-pod-sparql")
}
